{"version":3,"sources":["questions.js","components/Answers.js","components/ChefResult.js","components/CleanerResult.js","components/HoarderResult.js","components/Undetermined.js","components/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["quizQuestions","question","answers","type","content","image","Answers","props","undefined","img","className","name","checked","answerType","answer","id","value","disabled","onChange","onAnswerSelected","htmlFor","answerContent","alt","src","style","height","width","ChefResult","quizResult","CleanerResult","HoarderResult","Undetermined","Questions","state","counter","questionId","answerOptions","answersCount","result","handleSelectedAnswer","bind","this","answersCountKeys","Object","keys","answersCountValues","map","key","maxAnswerCount","Math","max","apply","filter","length","setState","e","setUserAnswer","currentTarget","setTimeout","setNextQuestion","setResults","getResults","array","temporaryValue","randomIndex","currentIndex","floor","random","shuffledAnswer","shuffleAnswer","answ","renderResults","renderAnswerOptions","Component","App","onClick","window","location","reload","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e9dcaa15.chunk.js","sourcesContent":["const quizQuestions = [\n  {\n    question:\n      'When you see a bag of chips laying on the table opened, what do you do?',\n    answers: [\n      {\n        type: 'Obsessive Cleaner',\n        content: 'Seal the bag and put them in the cabinet',\n      },\n      {\n        type: 'Chef',\n        content: 'Eat them with a special dip you made out of quarantine foods',\n      },\n      {\n        type: 'Hoarder',\n        content:\n          \"Leave it, it's not going anywhere. You're not going anywhere!\",\n      },\n    ],\n  },\n  {\n    question:\n      'When you see a 2 for 1 special for toilet paper, but you already have 16 rolls at home, you...',\n    answers: [\n      {\n        type: 'Obsessive Cleaner',\n        content:\n          'Ignore it, you rather grab some lysol and get the heck out of there!',\n      },\n      {\n        type: 'Chef',\n        content:\n          'Replace the toilet paper with some instant coffee and make dalgona',\n      },\n      {\n        type: 'Hoarder',\n        content:\n          'Buy it! In fact, buy an additional. You just never know in these times! ',\n      },\n    ],\n  },\n  {\n    question: 'Which of these images resembles your life?',\n    answers: [\n      {\n        type: 'Obsessive Cleaner',\n        image: 'cleaning.png',\n      },\n      {\n        type: 'Chef',\n        image: 'cookingma.png',\n      },\n      {\n        type: 'Hoarder',\n        image: 'hoarder.png',\n      },\n    ],\n  },\n  {\n    question: 'Which of these images describes your handwriting?',\n    answers: [\n      {\n        type: ['Obsessive Cleaner', 'Hoarder'],\n        image: 'perfect.png',\n      },\n      {\n        type: 'Chef',\n        image: 'messy.png',\n      },\n    ],\n  },\n];\n\nexport default quizQuestions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Answers(props) {\n  if (props.img === undefined) {\n    return (\n      <li className=\"answerOption\">\n        <input\n          type=\"radio\"\n          className=\"radioCustomButton\"\n          name=\"radioGroup\"\n          checked={props.answerType === props.answer}\n          id={props.answerType}\n          value={props.answerType}\n          disabled={props.answer}\n          onChange={props.onAnswerSelected}\n        />\n        <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\n          {props.answerContent}\n        </label>\n      </li>\n    );\n  } else {\n    return (\n      <li className=\"answerOption\">\n        <input\n          type=\"radio\"\n          className=\"radioCustomButton\"\n          name=\"radioGroup\"\n          checked={props.answerType === props.answer}\n          id={props.answerType}\n          value={props.answerType}\n          disabled={props.answer}\n          onChange={props.onAnswerSelected}\n        />\n        <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\n          <img\n            alt=\"\"\n            src={props.answerContent}\n            style={{ height: 500, width: 500 }}\n          />\n        </label>\n      </li>\n    );\n  }\n}\n\nAnswers.propTypes = {\n  answerType: PropTypes.string.isRequired,\n  answerContent: PropTypes.string.isRequired,\n  answer: PropTypes.string.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired,\n};\n\nexport default Answers;\n","import React from 'react';\nimport '../scss/style.scss';\nexport default function ChefResult(props) {\n  return (\n    <div className=\"resultContainer\">\n      <div className=\"imageContainer\">\n        <img\n          className=\"imgResults\"\n          alt=\"\"\n          src=\"https://media.giphy.com/media/h2HTvVuKVS4daQaVuS/source.gif\"\n          style={{ width: 500, height: 500 }}\n        />\n      </div>\n      <p>\n        Congratulations! You are a {props.quizResult}! I'm sure you have been\n        making the most interesting meals with some umm...choice ingredients!\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\nimport '../scss/style.scss';\nexport default function CleanerResult(props) {\n  return (\n    <div className=\"resultContainer\">\n      <div className=\"imageContainer\">\n        <img\n          className=\"imgResults\"\n          alt=\"\"\n          src=\"https://media.giphy.com/media/rBPbNvfRB6nVm/source.gif\"\n          style={{ width: 500, height: 500 }}\n        />\n      </div>\n      <p>\n        Congratulations you are an {props.quizResult}! You have literally been\n        scrubbing away your tabletops since you heard of this horrible news!\n        Keep up the good work, and don't listen to anyone that says \"aren't you\n        overoing it just a little bit?\"\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\nimport '../scss/style.scss';\nexport default function HoarderResult(props) {\n  return (\n    <div className=\"resultContainer\">\n      <div className=\"imageContainer\">\n        <img\n          className=\"imgResults\"\n          alt=\"\"\n          src=\"https://media.giphy.com/media/1vZ8VKKyEiBeVrVYO7/source.gif\"\n          style={{ width: 500, height: 500 }}\n        />\n      </div>\n      <p>\n        Congrats, you're a {props.quizResult}! You don't have to worry about any\n        necessities for the next few months. You probably have a bunker and a\n        six month supply of emergency food! The rest of us are just trying to\n        catch up!\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\nimport '../scss/style.scss';\nexport default function Undetermined() {\n  return (\n    <div>\n      <div className=\"imageContainer\">\n        <img\n          alt=\"\"\n          src=\"https://media.giphy.com/media/hRxhewwANK0V5n4gq3/source.gif\"\n          style={{ width: 500, height: 500 }}\n        />\n      </div>\n      <p>\n        You're results are undetermined. You are not easily defined! Good job...\n      </p>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport quizQuestions from '../questions';\nimport Answers from './Answers';\nimport ChefResult from './ChefResult';\nimport CleanerResult from './CleanerResult';\nimport HoarderResult from './HoarderResult';\nimport Undetermined from './Undetermined';\nimport '../scss/style.scss';\nexport default class Questions extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {},\n      result: '',\n    };\n\n    this.handleSelectedAnswer = this.handleSelectedAnswer.bind(this);\n  }\n\n  getResults() {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);\n    const answersCountValues = answersCountKeys.map((key) => answersCount[key]);\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\n\n    return answersCountKeys.filter(\n      (key) => answersCount[key] === maxAnswerCount\n    );\n  }\n  setResults(result) {\n    if (result.length === 1) {\n      this.setState({ result: result[0] });\n    } else {\n      this.setState({ result: 'Undetermined' });\n    }\n  }\n\n  setUserAnswer(answer) {\n    this.setState((state) => ({\n      answersCount: {\n        ...state.answersCount,\n        [answer]: (state.answersCount[answer] || 0) + 1,\n      },\n      answers: answer,\n    }));\n  }\n  handleSelectedAnswer(e) {\n    this.setUserAnswer(e.currentTarget.value);\n    if (this.state.questionId < quizQuestions.length) {\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      setTimeout(() => this.setResults(this.getResults()), 300);\n    }\n  }\n  renderAnswerOptions(key) {\n    return (\n      <Answers\n        key={key.content || key.image}\n        answerContent={key.content || key.image}\n        img={key.image}\n        answerType={key.type}\n        answer={this.state.answer}\n        questionId={this.state.questionId}\n        onAnswerSelected={this.handleSelectedAnswer}\n      />\n    );\n  }\n  shuffleAnswer(array) {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n  componentDidMount() {\n    const shuffledAnswer = quizQuestions.map((question) =>\n      this.shuffleAnswer(question.answers)\n    );\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswer[0],\n    });\n  }\n  setNextQuestion() {\n    let counter = this.state.counter + 1;\n    let questionId = this.state.questionId + 1;\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions:\n        quizQuestions[counter].answers ||\n        quizQuestions[counter][1].answers ||\n        quizQuestions[counter].answers.map((answ) => answ.type),\n      answer: '',\n    });\n  }\n  renderResults() {\n    if (this.state.result === 'Chef') {\n      return <ChefResult quizResult={this.state.result} />;\n    } else if (this.state.result === 'Obsessive Cleaner') {\n      return <CleanerResult quizResult={this.state.result} />;\n    } else if (this.state.result === 'Hoarder') {\n      return <HoarderResult quizResult={this.state.result} />;\n    } else {\n      return <Undetermined />;\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h1>{!this.state.result.length ? this.state.question : ''}</h1>\n        <h2 className=\"answerOptions\">\n          {this.state.result\n            ? this.renderResults()\n            : this.state.answerOptions.map((answer) =>\n                this.renderAnswerOptions(answer)\n              )}\n        </h2>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport '../src/scss/style.scss';\nimport Quiz from './components/Quiz';\nfunction App() {\n  function refreshPage() {\n    window.location.reload();\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"Appheader\">\n        <div className=\"container\">\n          <header className=\"header\" onClick={refreshPage}>\n            What Type of Person Are You In Quarantine?\n          </header>\n          <div className=\"Appheader-content\">\n            <Quiz className=\"content-box\" />\n            <br></br>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}